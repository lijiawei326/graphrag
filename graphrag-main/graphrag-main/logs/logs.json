{
    "type": "error",
    "data": "Error running pipeline!",
    "stack": "Traceback (most recent call last):\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\graphrag\\index\\run\\run_pipeline.py\", line 111, in _run_pipeline\n    result = await workflow_function(config, context)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\graphrag\\index\\workflows\\extract_graph.py\", line 35, in run_workflow\n    extraction_strategy = config.extract_graph.resolved_strategy(\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\graphrag\\config\\models\\extract_graph_config.py\", line 49, in resolved_strategy\n    \"extraction_prompt\": (Path(root_dir) / self.prompt).read_text(\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\.conda\\envs\\agent\\Lib\\pathlib.py\", line 1027, in read_text\n    with self.open(mode='r', encoding=encoding, errors=errors) as f:\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\.conda\\envs\\agent\\Lib\\pathlib.py\", line 1013, in open\n    return io.open(self, mode, buffering, encoding, errors, newline)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nFileNotFoundError: [Errno 2] No such file or directory: 'C:\\\\Users\\\\lijiawei\\\\Desktop\\\\ai-agent\\\\graphrag\\\\prompt_turn_output\\\\extract_graph_zh.txt'\n",
    "source": "[Errno 2] No such file or directory: 'C:\\\\Users\\\\lijiawei\\\\Desktop\\\\ai-agent\\\\graphrag\\\\prompt_turn_output\\\\extract_graph_zh.txt'",
    "details": null
}
{
    "type": "error",
    "data": "Error running pipeline!",
    "stack": "Traceback (most recent call last):\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\graphrag\\index\\run\\run_pipeline.py\", line 111, in _run_pipeline\n    result = await workflow_function(config, context)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\graphrag\\index\\workflows\\extract_graph.py\", line 35, in run_workflow\n    extraction_strategy = config.extract_graph.resolved_strategy(\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\graphrag\\config\\models\\extract_graph_config.py\", line 49, in resolved_strategy\n    \"extraction_prompt\": (Path(root_dir) / self.prompt).read_text(\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\.conda\\envs\\agent\\Lib\\pathlib.py\", line 1027, in read_text\n    with self.open(mode='r', encoding=encoding, errors=errors) as f:\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\.conda\\envs\\agent\\Lib\\pathlib.py\", line 1013, in open\n    return io.open(self, mode, buffering, encoding, errors, newline)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nFileNotFoundError: [Errno 2] No such file or directory: 'C:\\\\Users\\\\lijiawei\\\\Desktop\\\\ai-agent\\\\graphrag\\\\prompt_turn_output\\\\extract_graph.txt'\n",
    "source": "[Errno 2] No such file or directory: 'C:\\\\Users\\\\lijiawei\\\\Desktop\\\\ai-agent\\\\graphrag\\\\prompt_turn_output\\\\extract_graph.txt'",
    "details": null
}
{
    "type": "error",
    "data": "Error Invoking LLM",
    "stack": "Traceback (most recent call last):\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\base\\base_llm.py\", line 144, in __call__\n    return await self._decorated_target(prompt, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\base\\services\\json.py\", line 78, in invoke\n    return await delegate(prompt, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\base\\services\\cached.py\", line 137, in invoke\n    result = await delegate(prompt, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\base\\services\\rate_limiter.py\", line 80, in invoke\n    await self._handle_post_request_limiting(result)\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\base\\services\\rate_limiter.py\", line 57, in _handle_post_request_limiting\n    async with self._limiter.use(manifest):\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\limiting\\base.py\", line 32, in __aenter__\n    await self._limiter.acquire(self._manifest)\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\limiting\\composite.py\", line 33, in acquire\n    await limiter.acquire(manifest)\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\limiting\\tpm.py\", line 40, in acquire\n    await self._limiter.acquire(min(total_tokens, self._tokens_per_minute))\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\aiolimiter\\leakybucket.py\", line 151, in acquire\n    await fut\nasyncio.exceptions.CancelledError\n",
    "source": "",
    "details": {
        "prompt": "MANY entities and relationships were missed in the last extraction. Remember to ONLY emit entities that match any of the previously extracted types. Add them below using the same format:\n",
        "kwargs": {
            "history": [],
            "name": "extract-continuation-0"
        }
    }
}
{
    "type": "error",
    "data": "Error running pipeline!",
    "stack": "Traceback (most recent call last):\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\graphrag\\index\\run\\run_pipeline.py\", line 111, in _run_pipeline\n    result = await workflow_function(config, context)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\graphrag\\index\\workflows\\create_final_documents.py\", line 23, in run_workflow\n    output = create_final_documents(documents, text_units)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\graphrag\\index\\workflows\\create_final_documents.py\", line 71, in create_final_documents\n    return rejoined.loc[:, DOCUMENTS_FINAL_COLUMNS]\n           ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py\", line 1184, in __getitem__\n    return self._getitem_tuple(key)\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py\", line 1377, in _getitem_tuple\n    return self._getitem_tuple_same_dim(tup)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py\", line 1020, in _getitem_tuple_same_dim\n    retval = getattr(retval, self.name)._getitem_axis(key, axis=i)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py\", line 1420, in _getitem_axis\n    return self._getitem_iterable(key, axis=axis)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py\", line 1360, in _getitem_iterable\n    keyarr, indexer = self._get_listlike_indexer(key, axis)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py\", line 1558, in _get_listlike_indexer\n    keyarr, indexer = ax._get_indexer_strict(key, axis_name)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py\", line 6200, in _get_indexer_strict\n    self._raise_if_missing(keyarr, indexer, axis_name)\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py\", line 6252, in _raise_if_missing\n    raise KeyError(f\"{not_found} not in index\")\nKeyError: \"['creation_date'] not in index\"\n",
    "source": "\"['creation_date'] not in index\"",
    "details": null
}
{
    "type": "error",
    "data": "Error Invoking LLM",
    "stack": "Traceback (most recent call last):\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\base\\base_llm.py\", line 144, in __call__\n    return await self._decorated_target(prompt, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\base\\services\\json.py\", line 78, in invoke\n    return await delegate(prompt, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\base\\services\\cached.py\", line 137, in invoke\n    result = await delegate(prompt, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\base\\services\\rate_limiter.py\", line 75, in invoke\n    result = await delegate(prompt, **args)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\base\\base_llm.py\", line 126, in _decorator_target\n    output = await self._execute_llm(prompt, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\openai\\llm\\openai_text_chat_llm.py\", line 166, in _execute_llm\n    raw_response = await self._client.chat.completions.with_raw_response.create(\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\openai\\_legacy_response.py\", line 381, in wrapped\n    return cast(LegacyAPIResponse[R], await func(*args, **kwargs))\n                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\openai\\resources\\chat\\completions\\completions.py\", line 2028, in create\n    return await self._post(\n           ^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\openai\\_base_client.py\", line 1742, in post\n    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\openai\\_base_client.py\", line 1484, in request\n    response = await self._client.send(\n               ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\httpx\\_client.py\", line 1643, in send\n    raise exc\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\httpx\\_client.py\", line 1637, in send\n    await response.aread()\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\httpx\\_models.py\", line 979, in aread\n    self._content = b\"\".join([part async for part in self.aiter_bytes()])\n                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\httpx\\_models.py\", line 997, in aiter_bytes\n    async for raw_bytes in self.aiter_raw():\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\httpx\\_models.py\", line 1055, in aiter_raw\n    async for raw_stream_bytes in self.stream:\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\httpx\\_client.py\", line 176, in __aiter__\n    async for chunk in self._stream:\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\httpx\\_transports\\default.py\", line 271, in __aiter__\n    async for part in self._httpcore_stream:\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\httpcore\\_async\\connection_pool.py\", line 407, in __aiter__\n    raise exc from None\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\httpcore\\_async\\connection_pool.py\", line 403, in __aiter__\n    async for part in self._stream:\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\httpcore\\_async\\http11.py\", line 342, in __aiter__\n    raise exc\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\httpcore\\_async\\http11.py\", line 334, in __aiter__\n    async for chunk in self._connection._receive_response_body(**kwargs):\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\httpcore\\_async\\http11.py\", line 203, in _receive_response_body\n    event = await self._receive_event(timeout=timeout)\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\httpcore\\_async\\http11.py\", line 217, in _receive_event\n    data = await self._network_stream.read(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\httpcore\\_backends\\anyio.py\", line 35, in read\n    return await self._stream.receive(max_bytes=max_bytes)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\anyio\\streams\\tls.py\", line 219, in receive\n    data = await self._call_sslobject_method(self._ssl_object.read, max_bytes)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\anyio\\streams\\tls.py\", line 162, in _call_sslobject_method\n    data = await self.transport_stream.receive()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\anyio\\_backends\\_asyncio.py\", line 1254, in receive\n    await self._protocol.read_event.wait()\n  File \"C:\\Users\\lijiawei\\.conda\\envs\\agent\\Lib\\asyncio\\locks.py\", line 212, in wait\n    await fut\nasyncio.exceptions.CancelledError\n",
    "source": "",
    "details": {
        "prompt": "MANY entities and relationships were missed in the last extraction. Remember to ONLY emit entities that match any of the previously extracted types. Add them below using the same format:\n",
        "kwargs": {
            "history": [
                {
                    "content": "\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity's attributes and activities\nFormat each entity as (\"entity\"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as (\"relationship\"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis's Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n(\"entity\"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n(\"entity\"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n(\"entity\"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis's money supply)\n##\n(\"relationship\"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal's (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation's debut on the public markets isn't indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n(\"entity\"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n(\"entity\"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n(\"relationship\"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad's capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia's capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia's Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n(\"entity\"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n(\"entity\"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n(\"entity\"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n(\"entity\"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n(\"entity\"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n(\"entity\"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n(\"entity\"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia's Alhamia Prison)\n##\n(\"entity\"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n(\"entity\"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n(\"entity\"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n(\"relationship\"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n(\"relationship\"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n(\"relationship\"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n(\"relationship\"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n(\"relationship\"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n(\"relationship\"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n(\"relationship\"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n(\"relationship\"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n(\"relationship\"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n(\"relationship\"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: [处理错误] all_text.pdf: cannot access local variable 'auto_dir' where it is not associated with a value\n######################\nOutput:",
                    "role": "user"
                },
                {
                    "role": "assistant",
                    "content": "(\"entity\"<|>ALL_TEXT.PDF<|>ORGANIZATION<|>The file all_text.pdf encountered an error while processing, indicating it cannot access a local variable 'auto_dir' where it is not associated with a value)\n##\n(\"relationship\"<|>ALL_TEXT.PDF<|>AUTO_DIR<|>The file all_text.pdf attempted to access the variable 'auto_dir' but failed due to it not being associated with a value<|>5)\n<|COMPLETE|>"
                }
            ],
            "name": "extract-continuation-0"
        }
    }
}
{
    "type": "error",
    "data": "Error Invoking LLM",
    "stack": "Traceback (most recent call last):\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\base\\base_llm.py\", line 144, in __call__\n    return await self._decorated_target(prompt, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\base\\services\\cached.py\", line 137, in invoke\n    result = await delegate(prompt, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\base\\services\\rate_limiter.py\", line 73, in invoke\n    async with self._limiter.use(manifest):\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\limiting\\base.py\", line 32, in __aenter__\n    await self._limiter.acquire(self._manifest)\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\limiting\\composite.py\", line 33, in acquire\n    await limiter.acquire(manifest)\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\limiting\\tpm.py\", line 40, in acquire\n    await self._limiter.acquire(min(total_tokens, self._tokens_per_minute))\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\aiolimiter\\leakybucket.py\", line 151, in acquire\n    await fut\nasyncio.exceptions.CancelledError\n",
    "source": "",
    "details": {
        "prompt": [
            "# ALL_TEXT.PDF and AUTO_DIR Error Community\n\nThe community is centered around the error encountered by ALL_TEXT.PDF when it attempted to access the variable 'auto_dir', which was not associated with a value. This relationship highlights a technical issue within the community's structure.\n\n## ALL_TEXT.PDF's error as the central issue\n\nThe file ALL_TEXT.PDF is the central entity in this community, encountering an error when it attempted to access the variable 'auto_dir'. This error indicates a technical problem that could affect the processing of the file. The relationship between ALL_TEXT.PDF and AUTO_DIR is crucial in understanding the nature of this issue. [Data: Entities (0), Relationships (0)]\n\n## AUTO_DIR's undefined status\n\nAUTO_DIR is identified as a variable that ALL_TEXT.PDF attempted to access but failed because it was not associated with a value. This suggests a potential misconfiguration or error in the code or environment where ALL_TEXT.PDF is being processed. The undefined status of AUTO_DIR is a key factor in the community's dynamics. [Data: Entities (1), Relationships (0)]"
        ],
        "kwargs": {}
    }
}
{
    "type": "error",
    "data": "Error Invoking LLM",
    "stack": "Traceback (most recent call last):\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\base\\base_llm.py\", line 144, in __call__\n    return await self._decorated_target(prompt, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\base\\services\\json.py\", line 78, in invoke\n    return await delegate(prompt, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\base\\services\\cached.py\", line 137, in invoke\n    result = await delegate(prompt, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\base\\services\\rate_limiter.py\", line 73, in invoke\n    async with self._limiter.use(manifest):\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\limiting\\base.py\", line 32, in __aenter__\n    await self._limiter.acquire(self._manifest)\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\limiting\\composite.py\", line 33, in acquire\n    await limiter.acquire(manifest)\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\limiting\\rpm.py\", line 39, in acquire\n    await self._limiter.acquire()\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\aiolimiter\\leakybucket.py\", line 151, in acquire\n    await fut\nasyncio.exceptions.CancelledError\n",
    "source": "",
    "details": {
        "prompt": "MANY entities and relationships were missed in the last extraction. Remember to ONLY emit entities that match any of the previously extracted types. Add them below using the same format:\n",
        "kwargs": {
            "history": [
                {
                    "content": "\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity's attributes and activities\nFormat each entity as (\"entity\"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as (\"relationship\"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis's Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n(\"entity\"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n(\"entity\"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n(\"entity\"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis's money supply)\n##\n(\"relationship\"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal's (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation's debut on the public markets isn't indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n(\"entity\"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n(\"entity\"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n(\"relationship\"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad's capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia's capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia's Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n(\"entity\"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n(\"entity\"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n(\"entity\"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n(\"entity\"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n(\"entity\"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n(\"entity\"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n(\"entity\"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia's Alhamia Prison)\n##\n(\"entity\"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n(\"entity\"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n(\"entity\"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n(\"relationship\"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n(\"relationship\"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n(\"relationship\"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n(\"relationship\"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n(\"relationship\"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n(\"relationship\"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n(\"relationship\"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n(\"relationship\"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n(\"relationship\"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n(\"relationship\"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: [处理错误] all_text.pdf: cannot access local variable 'content_list_path' where it is not associated with a value\n######################\nOutput:",
                    "role": "user"
                },
                {
                    "role": "assistant",
                    "content": "(\"entity\"<|>ALL_TEXT.PDF<|>ORGANIZATION<|>The file all_text.pdf encountered an error during processing, indicating it cannot access a local variable 'content_list_path' where it is not associated with a value)\n<|COMPLETE|>"
                }
            ],
            "name": "extract-continuation-0"
        }
    }
}
{
    "type": "error",
    "data": "Error running pipeline!",
    "stack": "Traceback (most recent call last):\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\graphrag\\index\\run\\run_pipeline.py\", line 111, in _run_pipeline\n    result = await workflow_function(config, context)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\graphrag\\index\\workflows\\create_final_documents.py\", line 23, in run_workflow\n    output = create_final_documents(documents, text_units)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\graphrag\\index\\workflows\\create_final_documents.py\", line 71, in create_final_documents\n    return rejoined.loc[:, DOCUMENTS_FINAL_COLUMNS]\n           ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py\", line 1184, in __getitem__\n    return self._getitem_tuple(key)\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py\", line 1377, in _getitem_tuple\n    return self._getitem_tuple_same_dim(tup)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py\", line 1020, in _getitem_tuple_same_dim\n    retval = getattr(retval, self.name)._getitem_axis(key, axis=i)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py\", line 1420, in _getitem_axis\n    return self._getitem_iterable(key, axis=axis)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py\", line 1360, in _getitem_iterable\n    keyarr, indexer = self._get_listlike_indexer(key, axis)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\pandas\\core\\indexing.py\", line 1558, in _get_listlike_indexer\n    keyarr, indexer = ax._get_indexer_strict(key, axis_name)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py\", line 6200, in _get_indexer_strict\n    self._raise_if_missing(keyarr, indexer, axis_name)\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py\", line 6252, in _raise_if_missing\n    raise KeyError(f\"{not_found} not in index\")\nKeyError: \"['creation_date'] not in index\"\n",
    "source": "\"['creation_date'] not in index\"",
    "details": null
}
{
    "type": "error",
    "data": "Error Invoking LLM",
    "stack": "Traceback (most recent call last):\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\base\\base_llm.py\", line 144, in __call__\n    return await self._decorated_target(prompt, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\base\\services\\json.py\", line 78, in invoke\n    return await delegate(prompt, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\base\\services\\cached.py\", line 137, in invoke\n    result = await delegate(prompt, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\base\\services\\rate_limiter.py\", line 73, in invoke\n    async with self._limiter.use(manifest):\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\limiting\\base.py\", line 32, in __aenter__\n    await self._limiter.acquire(self._manifest)\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\limiting\\composite.py\", line 33, in acquire\n    await limiter.acquire(manifest)\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\limiting\\rpm.py\", line 39, in acquire\n    await self._limiter.acquire()\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\aiolimiter\\leakybucket.py\", line 151, in acquire\n    await fut\nasyncio.exceptions.CancelledError\n",
    "source": "",
    "details": {
        "prompt": "MANY entities and relationships were missed in the last extraction. Remember to ONLY emit entities that match any of the previously extracted types. Add them below using the same format:\n",
        "kwargs": {
            "history": [
                {
                    "content": "\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity's attributes and activities\nFormat each entity as (\"entity\"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as (\"relationship\"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis's Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n(\"entity\"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n(\"entity\"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n(\"entity\"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis's money supply)\n##\n(\"relationship\"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal's (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation's debut on the public markets isn't indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n(\"entity\"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n(\"entity\"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n(\"relationship\"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad's capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia's capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia's Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n(\"entity\"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n(\"entity\"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n(\"entity\"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n(\"entity\"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n(\"entity\"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n(\"entity\"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n(\"entity\"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia's Alhamia Prison)\n##\n(\"entity\"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n(\"entity\"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n(\"entity\"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n(\"relationship\"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n(\"relationship\"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n(\"relationship\"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n(\"relationship\"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n(\"relationship\"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n(\"relationship\"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n(\"relationship\"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n(\"relationship\"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n(\"relationship\"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n(\"relationship\"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: [处理错误] all_text.pdf: cannot access local variable 'os' where it is not associated with a value\n######################\nOutput:",
                    "role": "user"
                },
                {
                    "role": "assistant",
                    "content": "<|COMPLETE|>"
                }
            ],
            "name": "extract-continuation-0"
        }
    }
}
{
    "type": "error",
    "data": "Error Invoking LLM",
    "stack": "Traceback (most recent call last):\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\base\\base_llm.py\", line 144, in __call__\n    return await self._decorated_target(prompt, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\base\\services\\json.py\", line 78, in invoke\n    return await delegate(prompt, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\base\\services\\cached.py\", line 137, in invoke\n    result = await delegate(prompt, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\base\\services\\rate_limiter.py\", line 75, in invoke\n    result = await delegate(prompt, **args)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\base\\base_llm.py\", line 126, in _decorator_target\n    output = await self._execute_llm(prompt, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\fnllm\\openai\\llm\\openai_text_chat_llm.py\", line 166, in _execute_llm\n    raw_response = await self._client.chat.completions.with_raw_response.create(\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\openai\\_legacy_response.py\", line 381, in wrapped\n    return cast(LegacyAPIResponse[R], await func(*args, **kwargs))\n                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\openai\\resources\\chat\\completions\\completions.py\", line 2028, in create\n    return await self._post(\n           ^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\openai\\_base_client.py\", line 1742, in post\n    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\openai\\_base_client.py\", line 1484, in request\n    response = await self._client.send(\n               ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\httpx\\_client.py\", line 1643, in send\n    raise exc\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\httpx\\_client.py\", line 1637, in send\n    await response.aread()\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\httpx\\_models.py\", line 979, in aread\n    self._content = b\"\".join([part async for part in self.aiter_bytes()])\n                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\httpx\\_models.py\", line 997, in aiter_bytes\n    async for raw_bytes in self.aiter_raw():\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\httpx\\_models.py\", line 1055, in aiter_raw\n    async for raw_stream_bytes in self.stream:\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\httpx\\_client.py\", line 176, in __aiter__\n    async for chunk in self._stream:\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\httpx\\_transports\\default.py\", line 271, in __aiter__\n    async for part in self._httpcore_stream:\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\httpcore\\_async\\connection_pool.py\", line 407, in __aiter__\n    raise exc from None\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\httpcore\\_async\\connection_pool.py\", line 403, in __aiter__\n    async for part in self._stream:\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\httpcore\\_async\\http11.py\", line 342, in __aiter__\n    raise exc\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\httpcore\\_async\\http11.py\", line 334, in __aiter__\n    async for chunk in self._connection._receive_response_body(**kwargs):\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\httpcore\\_async\\http11.py\", line 203, in _receive_response_body\n    event = await self._receive_event(timeout=timeout)\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\httpcore\\_async\\http11.py\", line 217, in _receive_event\n    data = await self._network_stream.read(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\httpcore\\_backends\\anyio.py\", line 35, in read\n    return await self._stream.receive(max_bytes=max_bytes)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\anyio\\streams\\tls.py\", line 219, in receive\n    data = await self._call_sslobject_method(self._ssl_object.read, max_bytes)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\anyio\\streams\\tls.py\", line 162, in _call_sslobject_method\n    data = await self.transport_stream.receive()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\anyio\\_backends\\_asyncio.py\", line 1254, in receive\n    await self._protocol.read_event.wait()\n  File \"C:\\Users\\lijiawei\\.conda\\envs\\agent\\Lib\\asyncio\\locks.py\", line 212, in wait\n    await fut\nasyncio.exceptions.CancelledError\n",
    "source": "",
    "details": {
        "prompt": "\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity's attributes and activities\nFormat each entity as (\"entity\"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as (\"relationship\"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis's Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n(\"entity\"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n(\"entity\"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n(\"entity\"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis's money supply)\n##\n(\"relationship\"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal's (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation's debut on the public markets isn't indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n(\"entity\"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n(\"entity\"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n(\"relationship\"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad's capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia's capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia's Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n(\"entity\"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n(\"entity\"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n(\"entity\"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n(\"entity\"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n(\"entity\"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n(\"entity\"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n(\"entity\"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia's Alhamia Prison)\n##\n(\"entity\"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n(\"entity\"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n(\"entity\"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n(\"relationship\"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n(\"relationship\"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n(\"relationship\"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n(\"relationship\"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n(\"relationship\"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n(\"relationship\"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n(\"relationship\"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n(\"relationship\"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n(\"relationship\"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n(\"relationship\"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: [MD文件不存在] all_text.pdf\n######################\nOutput:",
        "kwargs": {}
    }
}
{
    "type": "error",
    "data": "Error running pipeline!",
    "stack": "Traceback (most recent call last):\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\graphrag\\index\\run\\run_pipeline.py\", line 111, in _run_pipeline\n    result = await workflow_function(config, context)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\graphrag\\index\\workflows\\extract_graph.py\", line 46, in run_workflow\n    entities, relationships, raw_entities, raw_relationships = await extract_graph(\n                                                               ^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\graphrag\\index\\workflows\\extract_graph.py\", line 90, in extract_graph\n    extracted_entities, extracted_relationships = await extractor(\n                                                  ^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\graphrag\\index\\operations\\extract_graph\\extract_graph.py\", line 79, in extract_graph\n    entities = _merge_entities(entity_dfs)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\graphrag\\index\\operations\\extract_graph\\extract_graph.py\", line 103, in _merge_entities\n    all_entities.groupby([\"title\", \"type\"], sort=False)\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\pandas\\core\\frame.py\", line 9183, in groupby\n    return DataFrameGroupBy(\n           ^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\pandas\\core\\groupby\\groupby.py\", line 1329, in __init__\n    grouper, exclusions, obj = get_grouper(\n                               ^^^^^^^^^^^^\n  File \"C:\\Users\\lijiawei\\Desktop\\ai-agent\\graphrag\\.venv\\Lib\\site-packages\\pandas\\core\\groupby\\grouper.py\", line 1043, in get_grouper\n    raise KeyError(gpr)\nKeyError: 'title'\n",
    "source": "'title'",
    "details": null
}
